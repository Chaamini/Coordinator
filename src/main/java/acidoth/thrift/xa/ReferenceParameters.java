/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package acidoth.thrift.xa;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReferenceParameters implements org.apache.thrift.TBase<ReferenceParameters, ReferenceParameters._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReferenceParameters");

  private static final org.apache.thrift.protocol.TField PRIVATE_INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("private_instance", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MARK_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("mark_key", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReferenceParametersStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReferenceParametersTupleSchemeFactory());
  }

  public int private_instance; // required
  public String mark_key; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRIVATE_INSTANCE((short)1, "private_instance"),
    MARK_KEY((short)2, "mark_key");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRIVATE_INSTANCE
          return PRIVATE_INSTANCE;
        case 2: // MARK_KEY
          return MARK_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIVATE_INSTANCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRIVATE_INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("private_instance", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MARK_KEY, new org.apache.thrift.meta_data.FieldMetaData("mark_key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReferenceParameters.class, metaDataMap);
  }

  public ReferenceParameters() {
  }

  public ReferenceParameters(
    int private_instance,
    String mark_key)
  {
    this();
    this.private_instance = private_instance;
    setPrivate_instanceIsSet(true);
    this.mark_key = mark_key;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReferenceParameters(ReferenceParameters other) {
    __isset_bitfield = other.__isset_bitfield;
    this.private_instance = other.private_instance;
    if (other.isSetMark_key()) {
      this.mark_key = other.mark_key;
    }
  }

  public ReferenceParameters deepCopy() {
    return new ReferenceParameters(this);
  }

  @Override
  public void clear() {
    setPrivate_instanceIsSet(false);
    this.private_instance = 0;
    this.mark_key = null;
  }

  public int getPrivate_instance() {
    return this.private_instance;
  }

  public ReferenceParameters setPrivate_instance(int private_instance) {
    this.private_instance = private_instance;
    setPrivate_instanceIsSet(true);
    return this;
  }

  public void unsetPrivate_instance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIVATE_INSTANCE_ISSET_ID);
  }

  /** Returns true if field private_instance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivate_instance() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIVATE_INSTANCE_ISSET_ID);
  }

  public void setPrivate_instanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIVATE_INSTANCE_ISSET_ID, value);
  }

  public String getMark_key() {
    return this.mark_key;
  }

  public ReferenceParameters setMark_key(String mark_key) {
    this.mark_key = mark_key;
    return this;
  }

  public void unsetMark_key() {
    this.mark_key = null;
  }

  /** Returns true if field mark_key is set (has been assigned a value) and false otherwise */
  public boolean isSetMark_key() {
    return this.mark_key != null;
  }

  public void setMark_keyIsSet(boolean value) {
    if (!value) {
      this.mark_key = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRIVATE_INSTANCE:
      if (value == null) {
        unsetPrivate_instance();
      } else {
        setPrivate_instance((Integer)value);
      }
      break;

    case MARK_KEY:
      if (value == null) {
        unsetMark_key();
      } else {
        setMark_key((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRIVATE_INSTANCE:
      return Integer.valueOf(getPrivate_instance());

    case MARK_KEY:
      return getMark_key();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRIVATE_INSTANCE:
      return isSetPrivate_instance();
    case MARK_KEY:
      return isSetMark_key();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReferenceParameters)
      return this.equals((ReferenceParameters)that);
    return false;
  }

  public boolean equals(ReferenceParameters that) {
    if (that == null)
      return false;

    boolean this_present_private_instance = true;
    boolean that_present_private_instance = true;
    if (this_present_private_instance || that_present_private_instance) {
      if (!(this_present_private_instance && that_present_private_instance))
        return false;
      if (this.private_instance != that.private_instance)
        return false;
    }

    boolean this_present_mark_key = true && this.isSetMark_key();
    boolean that_present_mark_key = true && that.isSetMark_key();
    if (this_present_mark_key || that_present_mark_key) {
      if (!(this_present_mark_key && that_present_mark_key))
        return false;
      if (!this.mark_key.equals(that.mark_key))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ReferenceParameters other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ReferenceParameters typedOther = (ReferenceParameters)other;

    lastComparison = Boolean.valueOf(isSetPrivate_instance()).compareTo(typedOther.isSetPrivate_instance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivate_instance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.private_instance, typedOther.private_instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMark_key()).compareTo(typedOther.isSetMark_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMark_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mark_key, typedOther.mark_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReferenceParameters(");
    boolean first = true;

    sb.append("private_instance:");
    sb.append(this.private_instance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mark_key:");
    if (this.mark_key == null) {
      sb.append("null");
    } else {
      sb.append(this.mark_key);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'private_instance' because it's a primitive and you chose the non-beans generator.
    if (mark_key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mark_key' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReferenceParametersStandardSchemeFactory implements SchemeFactory {
    public ReferenceParametersStandardScheme getScheme() {
      return new ReferenceParametersStandardScheme();
    }
  }

  private static class ReferenceParametersStandardScheme extends StandardScheme<ReferenceParameters> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReferenceParameters struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRIVATE_INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.private_instance = iprot.readI32();
              struct.setPrivate_instanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MARK_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mark_key = iprot.readString();
              struct.setMark_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPrivate_instance()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'private_instance' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReferenceParameters struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PRIVATE_INSTANCE_FIELD_DESC);
      oprot.writeI32(struct.private_instance);
      oprot.writeFieldEnd();
      if (struct.mark_key != null) {
        oprot.writeFieldBegin(MARK_KEY_FIELD_DESC);
        oprot.writeString(struct.mark_key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReferenceParametersTupleSchemeFactory implements SchemeFactory {
    public ReferenceParametersTupleScheme getScheme() {
      return new ReferenceParametersTupleScheme();
    }
  }

  private static class ReferenceParametersTupleScheme extends TupleScheme<ReferenceParameters> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReferenceParameters struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.private_instance);
      oprot.writeString(struct.mark_key);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReferenceParameters struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.private_instance = iprot.readI32();
      struct.setPrivate_instanceIsSet(true);
      struct.mark_key = iprot.readString();
      struct.setMark_keyIsSet(true);
    }
  }

}

