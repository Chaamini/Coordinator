/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package acidoth.thrift.xa;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AcidothCoordinatorXAServices {

  public interface Iface {

    public EndPointReference ax_register(CoordinationContext coorContext, String protocolIdentifier, EndPointReference protocolServiceEPR) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ax_register(CoordinationContext coorContext, String protocolIdentifier, EndPointReference protocolServiceEPR, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ax_register_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public EndPointReference ax_register(CoordinationContext coorContext, String protocolIdentifier, EndPointReference protocolServiceEPR) throws org.apache.thrift.TException
    {
      send_ax_register(coorContext, protocolIdentifier, protocolServiceEPR);
      return recv_ax_register();
    }

    public void send_ax_register(CoordinationContext coorContext, String protocolIdentifier, EndPointReference protocolServiceEPR) throws org.apache.thrift.TException
    {
      ax_register_args args = new ax_register_args();
      args.setCoorContext(coorContext);
      args.setProtocolIdentifier(protocolIdentifier);
      args.setProtocolServiceEPR(protocolServiceEPR);
      sendBase("ax_register", args);
    }

    public EndPointReference recv_ax_register() throws org.apache.thrift.TException
    {
      ax_register_result result = new ax_register_result();
      receiveBase(result, "ax_register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ax_register failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ax_register(CoordinationContext coorContext, String protocolIdentifier, EndPointReference protocolServiceEPR, org.apache.thrift.async.AsyncMethodCallback<ax_register_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ax_register_call method_call = new ax_register_call(coorContext, protocolIdentifier, protocolServiceEPR, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ax_register_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CoordinationContext coorContext;
      private String protocolIdentifier;
      private EndPointReference protocolServiceEPR;
      public ax_register_call(CoordinationContext coorContext, String protocolIdentifier, EndPointReference protocolServiceEPR, org.apache.thrift.async.AsyncMethodCallback<ax_register_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.coorContext = coorContext;
        this.protocolIdentifier = protocolIdentifier;
        this.protocolServiceEPR = protocolServiceEPR;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ax_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ax_register_args args = new ax_register_args();
        args.setCoorContext(coorContext);
        args.setProtocolIdentifier(protocolIdentifier);
        args.setProtocolServiceEPR(protocolServiceEPR);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EndPointReference getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ax_register();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ax_register", new ax_register());
      return processMap;
    }

    public static class ax_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ax_register_args> {
      public ax_register() {
        super("ax_register");
      }

      public ax_register_args getEmptyArgsInstance() {
        return new ax_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ax_register_result getResult(I iface, ax_register_args args) throws org.apache.thrift.TException {
        ax_register_result result = new ax_register_result();
        result.success = iface.ax_register(args.coorContext, args.protocolIdentifier, args.protocolServiceEPR);
        return result;
      }
    }

  }

  public static class ax_register_args implements org.apache.thrift.TBase<ax_register_args, ax_register_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ax_register_args");

    private static final org.apache.thrift.protocol.TField COOR_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("coorContext", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROTOCOL_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolIdentifier", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROTOCOL_SERVICE_EPR_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolServiceEPR", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ax_register_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ax_register_argsTupleSchemeFactory());
    }

    public CoordinationContext coorContext; // required
    public String protocolIdentifier; // required
    public EndPointReference protocolServiceEPR; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COOR_CONTEXT((short)1, "coorContext"),
      PROTOCOL_IDENTIFIER((short)2, "protocolIdentifier"),
      PROTOCOL_SERVICE_EPR((short)3, "protocolServiceEPR");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COOR_CONTEXT
            return COOR_CONTEXT;
          case 2: // PROTOCOL_IDENTIFIER
            return PROTOCOL_IDENTIFIER;
          case 3: // PROTOCOL_SERVICE_EPR
            return PROTOCOL_SERVICE_EPR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COOR_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("coorContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoordinationContext.class)));
      tmpMap.put(_Fields.PROTOCOL_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("protocolIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROTOCOL_SERVICE_EPR, new org.apache.thrift.meta_data.FieldMetaData("protocolServiceEPR", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EndPointReference.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ax_register_args.class, metaDataMap);
    }

    public ax_register_args() {
    }

    public ax_register_args(
      CoordinationContext coorContext,
      String protocolIdentifier,
      EndPointReference protocolServiceEPR)
    {
      this();
      this.coorContext = coorContext;
      this.protocolIdentifier = protocolIdentifier;
      this.protocolServiceEPR = protocolServiceEPR;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ax_register_args(ax_register_args other) {
      if (other.isSetCoorContext()) {
        this.coorContext = new CoordinationContext(other.coorContext);
      }
      if (other.isSetProtocolIdentifier()) {
        this.protocolIdentifier = other.protocolIdentifier;
      }
      if (other.isSetProtocolServiceEPR()) {
        this.protocolServiceEPR = new EndPointReference(other.protocolServiceEPR);
      }
    }

    public ax_register_args deepCopy() {
      return new ax_register_args(this);
    }

    @Override
    public void clear() {
      this.coorContext = null;
      this.protocolIdentifier = null;
      this.protocolServiceEPR = null;
    }

    public CoordinationContext getCoorContext() {
      return this.coorContext;
    }

    public ax_register_args setCoorContext(CoordinationContext coorContext) {
      this.coorContext = coorContext;
      return this;
    }

    public void unsetCoorContext() {
      this.coorContext = null;
    }

    /** Returns true if field coorContext is set (has been assigned a value) and false otherwise */
    public boolean isSetCoorContext() {
      return this.coorContext != null;
    }

    public void setCoorContextIsSet(boolean value) {
      if (!value) {
        this.coorContext = null;
      }
    }

    public String getProtocolIdentifier() {
      return this.protocolIdentifier;
    }

    public ax_register_args setProtocolIdentifier(String protocolIdentifier) {
      this.protocolIdentifier = protocolIdentifier;
      return this;
    }

    public void unsetProtocolIdentifier() {
      this.protocolIdentifier = null;
    }

    /** Returns true if field protocolIdentifier is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocolIdentifier() {
      return this.protocolIdentifier != null;
    }

    public void setProtocolIdentifierIsSet(boolean value) {
      if (!value) {
        this.protocolIdentifier = null;
      }
    }

    public EndPointReference getProtocolServiceEPR() {
      return this.protocolServiceEPR;
    }

    public ax_register_args setProtocolServiceEPR(EndPointReference protocolServiceEPR) {
      this.protocolServiceEPR = protocolServiceEPR;
      return this;
    }

    public void unsetProtocolServiceEPR() {
      this.protocolServiceEPR = null;
    }

    /** Returns true if field protocolServiceEPR is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocolServiceEPR() {
      return this.protocolServiceEPR != null;
    }

    public void setProtocolServiceEPRIsSet(boolean value) {
      if (!value) {
        this.protocolServiceEPR = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COOR_CONTEXT:
        if (value == null) {
          unsetCoorContext();
        } else {
          setCoorContext((CoordinationContext)value);
        }
        break;

      case PROTOCOL_IDENTIFIER:
        if (value == null) {
          unsetProtocolIdentifier();
        } else {
          setProtocolIdentifier((String)value);
        }
        break;

      case PROTOCOL_SERVICE_EPR:
        if (value == null) {
          unsetProtocolServiceEPR();
        } else {
          setProtocolServiceEPR((EndPointReference)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COOR_CONTEXT:
        return getCoorContext();

      case PROTOCOL_IDENTIFIER:
        return getProtocolIdentifier();

      case PROTOCOL_SERVICE_EPR:
        return getProtocolServiceEPR();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COOR_CONTEXT:
        return isSetCoorContext();
      case PROTOCOL_IDENTIFIER:
        return isSetProtocolIdentifier();
      case PROTOCOL_SERVICE_EPR:
        return isSetProtocolServiceEPR();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ax_register_args)
        return this.equals((ax_register_args)that);
      return false;
    }

    public boolean equals(ax_register_args that) {
      if (that == null)
        return false;

      boolean this_present_coorContext = true && this.isSetCoorContext();
      boolean that_present_coorContext = true && that.isSetCoorContext();
      if (this_present_coorContext || that_present_coorContext) {
        if (!(this_present_coorContext && that_present_coorContext))
          return false;
        if (!this.coorContext.equals(that.coorContext))
          return false;
      }

      boolean this_present_protocolIdentifier = true && this.isSetProtocolIdentifier();
      boolean that_present_protocolIdentifier = true && that.isSetProtocolIdentifier();
      if (this_present_protocolIdentifier || that_present_protocolIdentifier) {
        if (!(this_present_protocolIdentifier && that_present_protocolIdentifier))
          return false;
        if (!this.protocolIdentifier.equals(that.protocolIdentifier))
          return false;
      }

      boolean this_present_protocolServiceEPR = true && this.isSetProtocolServiceEPR();
      boolean that_present_protocolServiceEPR = true && that.isSetProtocolServiceEPR();
      if (this_present_protocolServiceEPR || that_present_protocolServiceEPR) {
        if (!(this_present_protocolServiceEPR && that_present_protocolServiceEPR))
          return false;
        if (!this.protocolServiceEPR.equals(that.protocolServiceEPR))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ax_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ax_register_args typedOther = (ax_register_args)other;

      lastComparison = Boolean.valueOf(isSetCoorContext()).compareTo(typedOther.isSetCoorContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoorContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coorContext, typedOther.coorContext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProtocolIdentifier()).compareTo(typedOther.isSetProtocolIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocolIdentifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolIdentifier, typedOther.protocolIdentifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProtocolServiceEPR()).compareTo(typedOther.isSetProtocolServiceEPR());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocolServiceEPR()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolServiceEPR, typedOther.protocolServiceEPR);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ax_register_args(");
      boolean first = true;

      sb.append("coorContext:");
      if (this.coorContext == null) {
        sb.append("null");
      } else {
        sb.append(this.coorContext);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocolIdentifier:");
      if (this.protocolIdentifier == null) {
        sb.append("null");
      } else {
        sb.append(this.protocolIdentifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocolServiceEPR:");
      if (this.protocolServiceEPR == null) {
        sb.append("null");
      } else {
        sb.append(this.protocolServiceEPR);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (coorContext != null) {
        coorContext.validate();
      }
      if (protocolServiceEPR != null) {
        protocolServiceEPR.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ax_register_argsStandardSchemeFactory implements SchemeFactory {
      public ax_register_argsStandardScheme getScheme() {
        return new ax_register_argsStandardScheme();
      }
    }

    private static class ax_register_argsStandardScheme extends StandardScheme<ax_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ax_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COOR_CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coorContext = new CoordinationContext();
                struct.coorContext.read(iprot);
                struct.setCoorContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROTOCOL_IDENTIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.protocolIdentifier = iprot.readString();
                struct.setProtocolIdentifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROTOCOL_SERVICE_EPR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.protocolServiceEPR = new EndPointReference();
                struct.protocolServiceEPR.read(iprot);
                struct.setProtocolServiceEPRIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ax_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.coorContext != null) {
          oprot.writeFieldBegin(COOR_CONTEXT_FIELD_DESC);
          struct.coorContext.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.protocolIdentifier != null) {
          oprot.writeFieldBegin(PROTOCOL_IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.protocolIdentifier);
          oprot.writeFieldEnd();
        }
        if (struct.protocolServiceEPR != null) {
          oprot.writeFieldBegin(PROTOCOL_SERVICE_EPR_FIELD_DESC);
          struct.protocolServiceEPR.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ax_register_argsTupleSchemeFactory implements SchemeFactory {
      public ax_register_argsTupleScheme getScheme() {
        return new ax_register_argsTupleScheme();
      }
    }

    private static class ax_register_argsTupleScheme extends TupleScheme<ax_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ax_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCoorContext()) {
          optionals.set(0);
        }
        if (struct.isSetProtocolIdentifier()) {
          optionals.set(1);
        }
        if (struct.isSetProtocolServiceEPR()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCoorContext()) {
          struct.coorContext.write(oprot);
        }
        if (struct.isSetProtocolIdentifier()) {
          oprot.writeString(struct.protocolIdentifier);
        }
        if (struct.isSetProtocolServiceEPR()) {
          struct.protocolServiceEPR.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ax_register_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.coorContext = new CoordinationContext();
          struct.coorContext.read(iprot);
          struct.setCoorContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.protocolIdentifier = iprot.readString();
          struct.setProtocolIdentifierIsSet(true);
        }
        if (incoming.get(2)) {
          struct.protocolServiceEPR = new EndPointReference();
          struct.protocolServiceEPR.read(iprot);
          struct.setProtocolServiceEPRIsSet(true);
        }
      }
    }

  }

  public static class ax_register_result implements org.apache.thrift.TBase<ax_register_result, ax_register_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ax_register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ax_register_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ax_register_resultTupleSchemeFactory());
    }

    public EndPointReference success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EndPointReference.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ax_register_result.class, metaDataMap);
    }

    public ax_register_result() {
    }

    public ax_register_result(
      EndPointReference success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ax_register_result(ax_register_result other) {
      if (other.isSetSuccess()) {
        this.success = new EndPointReference(other.success);
      }
    }

    public ax_register_result deepCopy() {
      return new ax_register_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public EndPointReference getSuccess() {
      return this.success;
    }

    public ax_register_result setSuccess(EndPointReference success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EndPointReference)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ax_register_result)
        return this.equals((ax_register_result)that);
      return false;
    }

    public boolean equals(ax_register_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ax_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ax_register_result typedOther = (ax_register_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ax_register_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ax_register_resultStandardSchemeFactory implements SchemeFactory {
      public ax_register_resultStandardScheme getScheme() {
        return new ax_register_resultStandardScheme();
      }
    }

    private static class ax_register_resultStandardScheme extends StandardScheme<ax_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ax_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EndPointReference();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ax_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ax_register_resultTupleSchemeFactory implements SchemeFactory {
      public ax_register_resultTupleScheme getScheme() {
        return new ax_register_resultTupleScheme();
      }
    }

    private static class ax_register_resultTupleScheme extends TupleScheme<ax_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ax_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ax_register_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new EndPointReference();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
